% Constrained Numerical Optimization for Estimation and Control
% OPTIMIZATION PROJECT 

clear all
close all
clc

%% track generation and waypoints positioning

[track,innerBoundary,outerBoundary,x0,y0,N] = track_generation();

%% parameters initialization and setting of initial state
run('Parameters.m');

X       =       x0;         % inertial X position (m)
Y       =       y0;         % inertial Y position (m)
Ux      =       4;          % body x velocity (m/s)
beta    =       0;          % sideslip angle (rad)
psi     =       0;          % yaw angle (rad)
r       =       0;          % yaw rate (rad/s)
xi0     =       [X Y Ux beta psi r]';

%% Step amplitude and input vector
Td_step             =       80 % for now - random number
delta_step          =       50 % for now - random number
u_output            =       [Td_step;delta_step];

%% trajectory optimizer


%% simulation

n_iterations    =       N-1;
tau             =       0;
d               =       0;

for i = 1:n_iterations
  % interpolator
    
  
  % from the output of the interpolator to the new state
  [xi_dot,Forces] = Vehicle_Model_Function(tau,xi0,u_output,d,theta);
  
  % update of the target position
  x_target   = xi0(1) + xi_dot(3)*cos(xi_dot(4))
  y_target   = xi0(2) + xi_dot(3)*sin(xi_dot(4))
  
  x_k
  % check if the target position is feasible
  inside = track_constraints(x_target,y_target,N,innerBoundary,outerBoundary)
  
  % if the target position is feasible, update of the state with the new
  % position. else exit the for cycle, because the trajectory is not
  % feasible.
  if inside == 1
      plot([x_target xi0(1)],[y_target xi0(2)]);
      pause(.001)
      xi0(1) = x_target;
      xi0(2) = y_target;
      xi0(3) = xi_dot(3);
      xi0(4) = xi_dot(4);
      xi0(5) = xi_dot(5);
      xi0(6) = xi_dot(6);
  else
      return
  end
  
end

